\documentclass{beamer}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[brazil]{babel}
\usepackage{graphicx}
\usepackage{verbatim}
\usepackage{alltt}
\usepackage{here}
\usepackage{xcolor}
\usepackage{fancyhdr}
\usepackage{setspace}
\usepackage{indentfirst}
\usepackage{multirow}
\usepackage{makeidx}
\usepackage{wrapfig}
\usepackage[all]{xy}
\usepackage{fancybox}
\usepackage{rotating}
\usepackage{eso-pic}
\usepackage{dcolumn}
\usepackage{color}
\usepackage{lscape}
\usepackage{subfigure}
\usepackage{scalefnt}

\newcommand{\ds}{\displaystyle}

\usetheme{CambridgeUS}

\definecolor{ESALQ}{RGB}{50,93,61}
\definecolor{DarkSeaGreen}{RGB}{143,188,143}
\definecolor{PaleGreen}{RGB}{84,139,84}
\setbeamercolor{frametitle}{fg=black,bg=DarkSeaGreen}
\setbeamercolor{structure}{fg=ESALQ}
\setbeamercolor{palette primary}{fg=ESALQ}
\setbeamercolor{palette secondary}{fg=ESALQ}
\setbeamercolor{palette tertiary}{bg=ESALQ}
\setbeamercolor{title}{fg=black,bg=DarkSeaGreen}
\setbeamercolor{block title}{fg=black,bg=DarkSeaGreen}
\setbeamercolor{block title alerted}{bg=DarkSeaGreen}
\makeindex

\usepackage{xspace}
\providecommand{\eg}{\textit{e.g.}\xspace}
\providecommand{\ie}{\textit{i.e.}\xspace}
\providecommand{\R}{\textbf{R}\xspace}
\providecommand{\emacs}{\textbf{Emacs}\xspace}
\providecommand{\knitr}{\textbf{knitr}\xspace}
\providecommand{\rstudio}{\textbf{RStudio}\xspace}

%% Fontes para codigo
\usepackage[scaled]{beramono} % truetype: Bistream Vera Sans Mono
%\usepackage{inconsolata}

\title[Introdução ao $\LaTeX$]{Introdução ao $\LaTeX$}
\author[]{\small Bruna Gabriela Wendpap \\
  Djair Durand Ramalho Frade \\
  Fernando de Pol Mayer \\
  Luiz Ricardo Nakamura \\
  Maria Cristina Martins \\
  Thiago de Paula Oliveira \\
  Thiago Gentil Ramires \\
  Profa. responsável: Dra. Roseli Aparecida Leandro
}
\institute[ESALQ/USP]{Universidade de São Paulo (USP) \\
  Escola Superior de Agricultura ``Luiz de Queiroz" (ESALQ)}
\date[]{04 de Outubro, 2013}

 \AtBeginSection[]
 {
   \begin{frame}
     \frametitle{Plano de aula}
     \tableofcontents[currentsection]
   \end{frame}
 }

 \AtBeginSubsection[]
 {
   \begin{frame}
     \frametitle{Plano de aula}
     \tableofcontents[currentsection,currentsubsection]
   \end{frame}
 }

\begin{document}
\pgfdeclareimage[height=1.4cm]{logo}{esalq}
\logo{\pgfuseimage{logo}}
\frame{\titlepage}

<<setup, include=FALSE, cache=FALSE>>=
## Opcoes globais
opts_chunk$set(size = "footnotesize", cache = TRUE)
               ## prompt = FALSE,
               ## comment = NA,
               ## tidy = FALSE,
               ## fig.align = "center",
               ## fig.width = 6,
               ## fig.height = 4,
               ## out.width=".7\\textwidth")
## thm <- knit_theme$get("beamer2")
## knit_theme$set(thm)
## options(width = 65, digits = 5, continue = "  ")
## Use pdfcrop=TRUE nos chunks para reduzir a area do PDF
## knit_hooks$set(pdfcrop = hook_pdfcrop)
@

\begin{frame}{Sumário}
\tableofcontents
\end{frame}

\section{Introdução}

\begin{frame}{Introdução}
Teste
\end{frame}

\section{Configuração}

\begin{frame}[fragile]{Configuração}
  \begin{itemize}
  \item O \knitr pode ser utilizado em qualquer editor de texto, mas
    alguns facilitadores são
    \begin{itemize}
    \item \emacs com ESS
    \item LyX
    \item \rstudio
    \end{itemize}
  \item A primeira coisa a fazer no \R é instalar os pacotes necessário:
<<eval=FALSE>>=
install.packages(c("knitr", "xtable"), dependencies = TRUE)
@
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Configuração}
A ideia é fazer a seguinte sequência:
\begin{enumerate}
\item Criar um arquivo com a extensão \texttt{.Rnw}
\item Inserir o preâmbulo tradicional do \LaTeX{}, texto e código
\item Compilar o arquivo com a função \texttt{knit()} $\rightarrow$ vai
  gerar um arquivo \texttt{.tex}
\item Compilar o arquivo \texttt{.tex} no \TeX{}Maker (ou outros)
  $\rightarrow$ gera o arquivo \texttt{.pdf}
\end{enumerate}
\end{frame}

\begin{frame}[fragile]{Configuração}
Expressões do \R são inseridas normalmente dentro de um ambiente especial
no arquivo \texttt{.Rnw}:
\begin{verbatim}
\Sexpr{''}<<>>=
...
@
\end{verbatim}
\begin{itemize}
\item Toda expressão do \R que estiver dentro deste \textbf{chunk} será
interpretada quando coompilada pelo \knitr, gerando a saída, gráficos,
etc.
\item Para inserir resultados no meio do texto (\textit{inline}) use
  \verb|\Sexpr{}|
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Configuração}
  \begin{block}{Um exemplo mínimo:}
    \footnotesize
\begin{verbatim}
\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[brazil]{babel}
\usepackage[margin=2.5cm]{geometry}

\begin{document}

Definindo a variável aleatória $X$ com distribuição Normal padrão, ou
seja, $X \sim \textrm{N}(0,1)$
\Sexpr{''}<<>>=
set.seed(1)
(x <- rnorm(10))
@
A média desta variável aleatória é %\%Sexpr{mean(x)}. O primeiro
valor é $X_i = %\%Sexpr{x[1]}$.

\end{document}
\end{verbatim}
\end{block}
\end{frame}

\begin{frame}[fragile]{Configuração}
No \rstudio, altere as opções para deixar o \knitr como padrão
\begin{figure}[h]
  \centering
  \includegraphics[height=.7\textheight]{RStudio_sweave.png}
\end{figure}
\end{frame}

\begin{frame}[fragile]{Configuração}
Com isso, o botão \textbf{Compile PDF}:
\begin{itemize}
\item Compila o arquivo \texttt{.Rnw} com o \knitr
\item Compila o arquivo \texttt{.tex} resultante com o PDF\LaTeX
\item Abre o PDF no editor padrão
\end{itemize}
\begin{block}{}
  Tudo isso é feito em um ambiente separado da sua área de trabalho
  original, para não haver confusão com objetos gerados
\end{block}
\end{frame}

\section{Opções}

\begin{frame}[fragile]{Opções}
  \begin{itemize}
  \item \textbf{Opções específicas}: são opções definidas para cada
    \textit{chunk} de código, especificadas entre \verb|<<| e \verb|>>|
  \item \textbf{Opções globais}: são opções definidas para todos os
    \textit{chunks} do documento, especificadas pela função do \knitr
<<eval=FALSE>>=
opts_chunk$set()
@
Ainda assim, é possível especificar opções para \textit{chunks} individuais!
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Opções}
  Algumas opções gerais (* indica o padrão):
  \begin{itemize}
  \item \texttt{eval}: \texttt{TRUE}*, \texttt{FALSE}, ou
    \texttt{c(1,3,4)} ou \texttt{-(4:6)}. Se o código deve ser interpretado
    ou não. Podem ser especificadas apenas linhas.
  \item \texttt{echo}: \texttt{TRUE}*, \texttt{FALSE}, ou
    \texttt{c(1,3,4)} ou \texttt{-(4:6)}. Se deve mostrar ou não o
    código ou pedaços dele. O resultado sempre aparece. (Diferente de
    \texttt{eval}, porque sempre será interpretado).
  \item \texttt{include}: \texttt{TRUE}*, \texttt{FALSE}. Se deve incluir ou não o
    código no documento final. Útil por exemplo para fazer cálculos
    auxiliares que não precisam ser mostrados no documento.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]{Opções}
Algumas considerações sobre as opções:
\begin{itemize}
\item Cada chunk pode ter um nome, por exemplo
\begin{verbatim}
\Sexpr{''}<<bloco1>>=
@
\end{verbatim}
que será útil posteriormente para dar nomes à figuras e extração de
código.
\item Evite usar espaços e pontos nos nomes dos chunks (use \verb|-| e
  \verb|_|).
\item As opções em \verb|<<>>=| devem estar sempre na \textbf{mesma linha}
\item \textbf{Todas} as opções devem ser expressões válidas do \R
  \begin{itemize}
  \item Caracteres entre aspas
  \item Valores lógicos: \texttt{TRUE} ou \texttt{FALSE}
  \end{itemize}
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Opções}
  \begin{alertblock}{Exercício}
    \begin{itemize}
    \item Insira mais 3 chunks no seu arquivo, cada um com pelo menos 3
      linhas de código do \R
    \item Teste as opções \texttt{eval}, \texttt{echo}, e
      \texttt{include} em cada uma delas
    \end{itemize}
  \end{alertblock}
\end{frame}

\begin{frame}[fragile]{Opções}
Opções para decoração de código:
\begin{itemize}
\item \texttt{prompt}: \texttt{TRUE} ou \texttt{FALSE}*. Se deve
  ou não inserir o \textit{prompt} (\verb|>|) do \R no início de cada
  linha.
\item \texttt{comment}: \verb|"##"|* ou \texttt{NA}. Se deve ou não
  comentar a saída dos comandos
\item \texttt{highlight}: \texttt{TRUE}* ou \texttt{FALSE}. Se deve
  colorir os códigos.
\item \texttt{size}: \verb|"normalsize"| ou qualquer tamanho de fonte do
  \LaTeX{} (\verb|"small"|, \verb|"footnotesize"|, $\ldots$)
\item \texttt{tidy}: \texttt{TRUE}* ou \texttt{FALSE}. Se o código deve
  ser formatado para um padrão geral pré-definido.
\end{itemize}
\end{frame}

\begin{frame}[fragile]{Opções}
  \begin{alertblock}{Exercício}
    \begin{itemize}
    \item Altere estas opções em alguns chunks e veja o resultado
    \item Em especial escreve esse código dentro de dois chunks separados
<<eval=FALSE, tidy=FALSE>>=
rnorm(10,
      10, 5)
@
cada um com \texttt{tidy=TRUE} e \texttt{tidy=FALSE}.
    \end{itemize}
  \end{alertblock}
\end{frame}

\begin{frame}[fragile]{Opções globais}
Para definir um padrão para todos os chunks globalmente, podemos
especificar logo no início do documento as opções que queremos. Por
exemplo:
\begin{verbatim}
\Sexpr{''}<<setup, include=FALSE, cache=FALSE, tidy=FALSE>>=
# Minhas configurações globais para os chunks
opts_chunk$set(size = "small",
               prompt = FALSE,
               comment = NA,
               tidy = FALSE,
               cache = TRUE)
@
\end{verbatim}
\end{frame}

\begin{frame}[fragile]{Opções}
  O \texttt{cache} (\texttt{TRUE}*/\texttt{FALSE}):
  \begin{itemize}
  \item Armazena os resultados dos chunks em disco
    \begin{itemize}
    \item Cria um diretório \verb|cache|
    \end{itemize}
  \item Esse resultado será reaproveitado nas próximas compilações,
    portanto um chunk em cache não será interpretado novamente
  \item Muito útil para documentos muito longos ou com comandos
    demorados ou bases de dados grandes
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
Teste
<<tidy=TRUE, prompt=TRUE, comment = NA, highlight=FALSE>>=
rnorm(10)
runif(10,
      1, 2)
@
Mais
<<test_label, include=FALSE>>=
1+1
@
\end{frame}



\end{document}

